---

- name: Set default network configuration
  set_fact:
    networks:
      - name: "{{ vsphere.network }}"
        type: dhcp
        start_connected: true
  delegate_to: localhost

- name: Set static IP in network configuration
  set_fact:
    networks:
      - name: "{{ vsphere.network }}"
        type: static
        ip: "{{ static_ip }}"
        netmask: 255.255.255.0
        gateway: "{{ static_ip.split('.')[0] }}.{{ static_ip.split('.')[1] }}.{{ static_ip.split('.')[2] }}.1"
        start_connected: true
  delegate_to: localhost
  when: 'static_ip is defined and static_ip != ""'

- name: Store network configuration for debugging
  copy:
    dest: "debug/network_{{ inventory_hostname }}.yml"
    content: "{{ networks | to_nice_json(indent=2) }}"
  delegate_to: localhost

- name: Creating new VMs
  vmware_guest:
    hostname: "{{ vsphere.hostname }}"
    username: "{{ vsphere.username }}"
    password: "{{ vsphere.password }}"
    validate_certs: no
    datacenter: "{{ vsphere.datacenter }}"
    datastore: "{{ vsphere.datastore }}"
    cluster: "{{ vsphere.cluster }}"
    folder: "{{ vsphere.folder }}"
    resource_pool: "{{ vsphere.resource_pool }}"
    name: "{{ inventory_hostname }}"
    state: poweredon
    template: "{{ provisioning[role].template }}"
    guest_id: ubuntu64Guest
    networks: "{{ networks }}"
    hardware:
      num_cpus: "{{ provisioning[role].cpus }}"
      num_cpu_cores_per_socket: "{{ provisioning[role].cpus }}"
      memory_mb: "{{ provisioning[role].memory_mb }}"
      hotadd_cpu: true
      hotremove_cpu: true
      hotadd_memory: true
    wait_for_ip_address: true
    customization:
      domain: "{{ vsphere.domain }}"
      dns_suffix:
        - "{{ vsphere.domain }}"
  delegate_to: localhost

- name: Add volume
  vmware_guest_disk:
    hostname: "{{ vsphere.hostname }}"
    username: "{{ vsphere.username }}"
    password: "{{ vsphere.password }}"
    validate_certs: no
    datacenter: "{{ vsphere.datacenter }}"
    name: "{{ inventory_hostname }}"
    disk:
      - size_gb: "{{ provisioning[role].disk_size_gb }}"
        type: thick
        datastore: "{{ vsphere.datastore }}"
        state: present
        scsi_controller: 0
        unit_number: 1
  delegate_to: localhost
  when: 'provisioning[role].disk_size_gb is defined'

- name: Collecting data for VM
  vmware_guest_facts:
    hostname: "{{ vsphere.hostname }}"
    username: "{{ vsphere.username }}"
    password: "{{ vsphere.password }}"
    validate_certs: no
    datacenter: "{{ vsphere.datacenter }}"
    folder: "{{ vsphere.folder }}"
    name: "{{ inventory_hostname }}"
  delegate_to: localhost
  register: node

- name: Storing connection data
  set_fact:
    ansible_host: "{{ node.instance.ipv4 }}"
  delegate_to: localhost

- name: Wait for SSH to be available
  wait_for:
    host: "{{ ansible_host }}"
    port: 22
    connect_timeout: 5
    timeout: 120
  delegate_to: localhost

- name: Add DNS servers
  raw: 'echo "        addresses:\n          - 10.11.11.11\n          - 10.12.12.12" >> /etc/netplan/99-netcfg-vmware.yaml'
  become: yes
  when: 'vsphere.dns_servers is defined and vsphere.dns_servers | length > 0'

- name: Update network configuration (netplan)
  raw: 'netplan generate && netplan apply'
  become: yes
  when: 'vsphere.dns_servers is defined and vsphere.dns_servers | length > 0'

- name: Making sure no other apt-get task is running
  raw: "while lsof /var/lib/apt/lists/lock || lsof /var/lib/dpkg/lock-frontend; do sleep 5; done"

- name: Install updates
  raw: "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -y upgrade"
  become: yes
  ignore_errors: yes
  no_log: true
  register: apt

- name: Show errors
  debug:
    msg: "{{ apt.stdout_lines | select('match', '^E: ') | list }}"
  when: 'apt.failed'

- name: Die if update failed
  raw: "false"
  when: 'apt.failed'

- name: Install Python
  raw: "apt-get -y install --no-install-recommends python-pip python3-pip python-apt aptitude"
  become: yes
